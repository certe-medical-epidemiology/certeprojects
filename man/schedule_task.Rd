% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schedule_task.R
\name{schedule_task}
\alias{schedule_task}
\title{Schedule Task (CRON-like)}
\usage{
schedule_task(
  minute,
  hour,
  day,
  month,
  weekday,
  users,
  file,
  project_number,
  log = TRUE,
  ref_time = Sys.time(),
  account = connect_planner(),
  check_mail = length(users) > 1,
  check_log = length(users) > 1,
  sent_delay = 15,
  sent_account = connect_outlook(),
  sent_to = read_secret("mail.error_to"),
  log_folder = read_secret("projects.log_path")
)
}
\arguments{
\item{minute}{one or more values between 0-59, or \code{.} or \code{"*"} for each minute}

\item{hour}{one or more values between 0-23, or \code{.} or \code{"*"} for each hour}

\item{day}{one or more values between 1-31, or \code{.} or \code{"*"} for each day}

\item{month}{one or more values between 1-12, or \code{.} or \code{"*"} for each mpnth}

\item{weekday}{one or more values between 0-7 (Sunday is both 0 and 7; Monday is 1), or \code{.} or \code{"*"} for each weekday}

\item{users}{logged in users, must correspond with \code{Sys.info()["users"]}. Currently logged in users is "\Sexpr{certeprojects:::get_current_user()}". This must be length > 1 if \code{check_mail} is \code{TRUE}.}

\item{file}{file name within the project, supports regular expression}

\item{project_number}{number of the project, must be numeric and exist in \code{\link[=planner_tasks_list]{planner_tasks_list()}}}

\item{log}{a \link{logical} to indicate whether this message should be printed: \emph{Running scheduled task at...}}

\item{ref_time}{time to use for reference, defaults to \code{\link[=Sys.time]{Sys.time()}}}

\item{account}{Planner account}

\item{check_mail}{a \link{logical} to indicate whether a project was sent by a previous user, by running \code{\link[certemail:mail]{certemail::mail_is_sent()}}}

\item{check_log}{a \link{logical} to indicate whether a log file exist for the project from a previous user}

\item{sent_delay}{delay in minutes. This will be multiplied by the position of the current users in \code{users} minus 1. For example, when \code{sent_delay = 15}, this will be \code{15} for user 2, and \code{30} for user 3.}

\item{sent_account}{Outlook account, to search sent mails}

\item{sent_to}{users to send error mail to}

\item{log_folder}{path that contains log files}

\item{check_sent_project}{a project number to check if a certain project had a mail sent on the date of \code{ref_time}.}
}
\description{
This will \link[=source]{source} a project file if time and user requirements are met, using a CRON-like syntax (\url{https://cron.help}).
}
\details{
The Windows Task Scheduler must be set up to use this function. Most convenient is to:
\enumerate{
\item Create an \R file such as \code{R_cron.R} with calls to \code{\link[=schedule_task]{schedule_task()}}
\item Create a batch file such as \code{R_cron.bat} that runs \code{R_cron.R} with \verb{R CMD BATCH}
\item Set up a Task Scheduler task that runs \code{R_cron.bat} every minute
}
}
\examples{
something_to_run <- function() {
  1 + 1
}

# units:      M  H  d  m  wd
schedule_task(., ., ., ., ., "user", "file", 123) every minute
schedule_task(0, ., ., ., ., "user", "file", 123) # start of each hour
schedule_task(0, 7, ., ., ., "user", "file", 123) # everyday at 7h00
schedule_task(0, 7, 1, ., ., "user", "file", 123) # first day of month at 7h00
schedule_task(0, 7, ., 2, ., "user", "file", 123) # everyday day in February at 7h00
schedule_task(0, 7, ., ., 1, "user", "file", 123) # every Monday at 7h00
schedule_task(0, 7, 1, 2, ., "user", "file", 123) # every 1st of February at 7h00
schedule_task(0, 7, ., 2, 1, "user", "file", 123) # every Monday in February at 7h00
schedule_task(0, 7, 1, 2, 1, "user", "file", 123) # each February 1st if it's a Monday at 7h00
schedule_task(0, 7,29, 2, ., "user", "file", 123) # once every 4 years at 7h00

# examples of combinations

# everyday at 7h00 and 7h30
schedule_task(c(0, 30), 7,        .,       .,              ., "user", "file", 123)
# everyday at 7h00 and 15h00
schedule_task(0,        c(7, 15), .,       .,              ., "user", "file", 123)
# everyday at 7h00 and 7h30 and 15h00 and 15h30
schedule_task(c(0, 30), c(7, 15), .,       .,              ., "user", "file", 123)
# every second Monday of the month at 7h00:
schedule_task(0,        7,        c(8:14), .,              1, "user", "file", 123)
# every 15th of April at 8h30 and 16h30:
schedule_task(30,       c(8, 16), 15,      4,              ., "user", "file", 123)
# once per quarter at 8h00 on the first day of the month:
schedule_task(0,        8,        1,       c(1, 4, 7, 10), ., "user", "file", 123)

# fall-back for failed jobs

# this will run at 8h00 if current users is "user1"
# it will run again:
# - if current users is "user2"
# - if project 123 has no mail in Sent Items
# - at default 15 minutes later (so, 8h15)
schedule_task(0, 8, ., ., ., c("user1", "user2"), "file", 123)
}
