% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ms_planner.R
\name{planner}
\alias{planner}
\alias{planner_browse}
\alias{planner_bucket_create}
\alias{planner_buckets_list}
\alias{planner_task_create}
\alias{planner_create_projecttask}
\alias{planner_checklist_to_projectasks}
\alias{planner_task_update}
\alias{planner_tasks_list}
\alias{planner_task_search}
\alias{planner_task_find}
\alias{planner_categories_list}
\alias{planner_retrieve_project_id}
\alias{planner_task_request_validation}
\alias{planner_task_request_authorisation}
\alias{planner_task_authorise}
\alias{planner_move_task}
\alias{planner_create_project_from_path}
\alias{planner_user_property}
\alias{planner_highest_project_id}
\alias{planner_highest_consult_id}
\alias{as.data.frame.ms_object}
\alias{as_tibble.ms_object}
\title{Connect to Microsoft Planner via Microsoft 365}
\usage{
planner_browse(account = connect_planner())

planner_bucket_create(bucket_name, account = connect_planner())

planner_buckets_list(account = connect_planner(), plain = FALSE)

planner_task_create(
  title,
  description = NULL,
  startdate = NULL,
  duedate = NULL,
  requested_by = NULL,
  priority = read_secret("planner.default.priority"),
  checklist_items = NULL,
  categories = NULL,
  assigned = NULL,
  bucket_name = read_secret("planner.default.bucket"),
  attachment_urls = NULL,
  account = connect_planner(),
  project_number = planner_highest_project_id() + 1,
  consult_number = planner_highest_consult_id() + 1
)

planner_create_projecttask(
  project_number,
  title,
  bucket_name = read_secret("planner.default.bucket.projecttask"),
  ...
)

planner_checklist_to_projectasks(
  task,
  bucket_name = read_secret("planner.default.bucket.projecttask"),
  ...
)

planner_task_update(
  task,
  title = NULL,
  description = NULL,
  startdate = NULL,
  duedate = NULL,
  priority = NULL,
  checklist_items = NULL,
  checklist_items_to_check = NULL,
  categories = NULL,
  categories_keep = FALSE,
  assigned = NULL,
  assigned_keep = FALSE,
  bucket_name = NULL,
  percent_completed = NULL,
  attachment_urls = NULL,
  preview_type = NULL,
  order_hint = NULL,
  account = connect_planner()
)

planner_tasks_list(
  account = connect_planner(),
  plain = FALSE,
  include_completed = TRUE
)

planner_task_search(
  search_term = ".*",
  limit = 50,
  include_completed = TRUE,
  include_description = FALSE,
  account = connect_planner()
)

planner_task_find(task, account = connect_planner())

planner_categories_list(account = connect_planner())

planner_retrieve_project_id(task, account = connect_planner())

planner_task_request_validation(
  task,
  attachment_urls = NULL,
  checklist_items = NULL,
  bucket_name = read_secret("planner.validate.bucket"),
  account = connect_planner()
)

planner_task_request_authorisation(
  task,
  category_text = read_secret("planner.label.authorise"),
  bucket_name = read_secret("planner.validate.bucket"),
  account = connect_planner()
)

planner_task_authorise(
  task,
  category_text = read_secret("planner.label.authorised"),
  bucket_name = read_secret("planner.default.bucket.consult"),
  account = connect_planner()
)

planner_move_task(
  current_task_id = project_get_current_id(ask = TRUE),
  account = connect_planner()
)

planner_create_project_from_path(
  path,
  projects_path = get_projects_path(),
  account = connect_planner(),
  title = basename(path),
  ...
)

planner_user_property(
  user,
  team_name = read_secret("team.name"),
  account = connect_planner(),
  property = "id",
  as_list = FALSE
)

planner_highest_project_id(
  task = read_secret("planner.dummy.project.id"),
  account = connect_planner()
)

planner_highest_consult_id(
  task = read_secret("planner.dummy.consult.id"),
  account = connect_planner()
)

\method{as.data.frame}{ms_object}(
  x,
  row.names = NULL,
  optional = FALSE,
  account = connect_planner(),
  ...
)

\method{as_tibble}{ms_object}(x, account = connect_planner(), ...)
}
\arguments{
\item{account}{a Microsoft 365 account to use for looking up properties. This has to be an object as returned by \code{\link[=connect_planner]{connect_planner()}} or via \code{\link[AzureGraph:graph_login]{AzureGraph::create_graph_login()}}\verb{$get_group(name)$get_plan(plan_title)}.}

\item{bucket_name}{name of the bucket}

\item{plain}{return as plain names, not as \code{Azure} objects}

\item{title}{title of the task}

\item{description}{a description for the task. A vector of length > 1 will be added as one text separated by white lines.}

\item{startdate}{a date to use as start date, use \code{FALSE} to remove it}

\item{duedate}{a date to use as due date, use \code{FALSE} to remove it}

\item{requested_by}{name of the person(s) who requested the task, this will be added as first line to \code{description}}

\item{priority}{a priority to set. Can be ranged between 0 (highest) and 10 (lowest), or: \code{"urgent"} or \code{"dringend"} for 1, \code{"important"} or \code{"belangrijk"} for 3, \code{"medium"} or \code{"gemiddeld"} or \code{FALSE} for 5, \code{"low"} or \code{"laag"} for 9. Priorities cannot be removed - the default setting is 5.}

\item{checklist_items}{character vector of checklist items}

\item{categories}{names of categories to add, can be multiple, but must exactly match existing category names}

\item{assigned}{names of members within the plan - use \code{NULL} to not add members in \code{\link[=planner_task_create]{planner_task_create()}}, and use \code{FALSE} to remove all existing members in \code{\link[=planner_task_update]{planner_task_update()}}}

\item{attachment_urls}{URLs to add as attachment, can be named characters to give the URLs a title. If they are Excel, PowerPoint or Word files, a preview will be shown on the task.}

\item{project_number}{the new project number to assign. Use \code{NULL} or \code{FALSE} to not assign a project number. Defaults to the currently highest project ID + 1.}

\item{consult_number}{the new consult number to assign. Use \code{NULL} or \code{FALSE} to not assign a consult number. Defaults to the currently highest consult ID + 1.}

\item{...}{arguments passed on to \code{\link[=planner_task_create]{planner_task_create()}}}

\item{task}{exact task ID or title, will be searched with \code{\link[certetoolbox:like]{\%like\%}}}

\item{checklist_items_to_check}{names/titles of checklist items that need to become checked}

\item{categories_keep}{add categories that are set in \code{categories} instead of replacing them, defaults to \code{FALSE}}

\item{assigned_keep}{add members that are set in \code{assigned} instead of replacing them, defaults to \code{FALSE}}

\item{percent_completed}{percentage of task completion between 0-100}

\item{preview_type}{type of preview - the checkbox on a task card. Can be \code{"automatic"}, \code{"noPreview"}, \code{"checklist"}, \code{"description"}, \code{"reference"}. When set to \code{"automatic"} the displayed preview is chosen by the app viewing the task.}

\item{order_hint}{order of the task}

\item{include_completed}{also search completed tasks}

\item{search_term}{search term, can contain a regular expression. When searching for project numbers (such as "p201 - Some text", or "p201" or "201"), only titles will be searched for the project number.}

\item{limit}{maximum number of tasks to show}

\item{include_description}{also search the description, which requires additional queries and lowers speed}

\item{category_text}{text of the category to use}

\item{current_task_id}{Project (p-)number of the project to update}

\item{path}{location of the folder that has to be converted to a project. This folder will be renamed to contain the new project number.}

\item{projects_path}{location of the folder that contains all department projects}

\item{user}{a user name, mail adress, or Certe login name}

\item{team_name}{name of the team, can be left blank to connect to an individual planner}

\item{property}{property to return, can be "id", "name" or "mail"}

\item{as_list}{return the full list of members as \link{list}, split into Eigenaars (Owners) / Leden (Members). This ignores \code{user}.}

\item{x}{an \code{ms_object}}

\item{row.names}{\code{NULL} or a character vector giving the row
    names for the data frame.  Missing values are not allowed.}

\item{optional}{logical. If \code{TRUE}, setting row names and
    converting column names (to syntactic names: see
    \code{\link[base]{make.names}}) is optional.  Note that all of \R's
    \pkg{base} package \code{as.data.frame()} methods use
    \code{optional} only for column names treatment, basically with the
    meaning of \code{\link[base]{data.frame}(*, check.names = !optional)}.
    See also the \code{make.names} argument of the \code{matrix} method.}
}
\description{
These functions use the connection to Microsoft Planner set up with \code{\link[=connect_planner]{connect_planner()}}.
}
\details{
\code{\link[=planner_task_search]{planner_task_search()}} searches the title and description using case-insensitive regular expressions and returns an \code{\link[Microsoft365R:ms_plan_task]{ms_plan_task}} object. In interactive mode and with multiple hits, a menu will be shown to pick from.

\code{\link[=planner_task_find]{planner_task_find()}} searches task title or ID, and returns an \code{\link[Microsoft365R:ms_plan_task]{ms_plan_task}} object. It is used internally b a lot of \verb{planner_*} functions, very fast, and does not support interactive use.

\code{\link[=planner_retrieve_project_id]{planner_retrieve_project_id()}} retrieves the p-number from the task title and returns it as \link{integer}.

Use \code{\link[=planner_create_project_from_path]{planner_create_project_from_path()}} to convert any folder (and any location) to a project folder, by (1) assigning a project number, (2) creating a Planner task and (3) moving the old folder to the department's projects folder.

\code{\link[=planner_highest_project_id]{planner_highest_project_id()}} retrieves the currently highest project ID from the dummy project.

\code{\link[=planner_highest_project_id]{planner_highest_project_id()}} retrieves the currently highest project ID from the dummy project. \code{\link[=planner_highest_consult_id]{planner_highest_consult_id()}} does this for consults.

Using \code{\link[=as.data.frame]{as.data.frame()}} or \code{\link[tibble:as_tibble]{tibble::as_tibble()}} on an \code{ms_object}, such as \code{ms_plan_task}, will return the properties and details of the object as a \link{data.frame}. For transforming many \code{ms_object}s to a data.frame, use \code{\link[=as.data.frame]{as.data.frame()}} or \code{\link[tibble:as_tibble]{tibble::as_tibble()}} in \code{\link[=lapply]{lapply()}} and bind the list of objects together. For example, this retrieves a tibble with the properties and details of all tasks:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{library(dplyr)
planner_tasks_list() |> 
  lapply(as_tibble) |> 
  bind_rows()

# also works for other 'ms_object's, such as 'ms_channel':
teams_channels_list(plain = FALSE) |> 
  lapply(as_tibble) |> 
  bind_rows()
}\if{html}{\out{</div>}}
}
